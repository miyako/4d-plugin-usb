/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : LIBUSB
 #	author : miyako
 #	2015/08/20
 #
 # --------------------------------------------------------------------------------*/

#include "libusb.h"


#if VERSIONWIN
#include <algorithm>//std::find
#include <Rpc.h> //UuidCreate
#endif

#define CALLBACK_IN_NEW_PROCESS 0
#define CALLBACK_SLEEP_TIME 59
#include <mutex>

// --- USB
void USB_SET_HOTPLUG_METHOD(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_hotplug_method(sLONG_PTR *pResult, PackagePtr pParams);
void USB_SET_LOCALE(sLONG_PTR *pResult, PackagePtr pParams);
void USB_GET_VERSION(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_error_description(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_error_name(sLONG_PTR *pResult, PackagePtr pParams);
void USB_GET_DEVICE_LIST(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_device_descriptor(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_config_descriptor(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Open(sLONG_PTR *pResult, PackagePtr pParams);
void USB_CLAIM_INTERFACE(sLONG_PTR *pResult, PackagePtr pParams);
void USB_RELEASE_INTERFACE(sLONG_PTR *pResult, PackagePtr pParams);
void USB_CLOSE(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_device(sLONG_PTR *pResult, PackagePtr pParams);
void USB_SET_INTERFACE_ALT_SETTING(sLONG_PTR *pResult, PackagePtr pParams);
void USB_SET_CONFIGURATION(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_configuration(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Open_device_with_vid_pid(sLONG_PTR *pResult, PackagePtr pParams);
void USB_BULK_TRANSFER(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_bus_number(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_port_number(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_device_address(sLONG_PTR *pResult, PackagePtr pParams);
void USB_Get_device_speed(sLONG_PTR *pResult, PackagePtr pParams);
void USB_CLEAR_HALT(sLONG_PTR *pResult, PackagePtr pParams);
void USB_GET_DESCRIPTOR(sLONG_PTR *pResult, PackagePtr pParams);
void USB_INTERRUPT_TRANSFER(sLONG_PTR *pResult, PackagePtr pParams);

#pragma mark -

#define USB_CONFIGURATION_ACTIVE 0
#define USB_CONFIGURATION_BY_INDEX 1
#define USB_CONFIGURATION_BY_VALUE 2
#define DESCRIPTOR_BUFFER_SIZE 1024

#pragma mark -

void OnStartup();
void OnCloseProcess();

#pragma mark -

void listenerLoop(void);
void listenerLoopStart(void);
void listenerLoopFinish(void);
void listenerLoopExecute(int event, int vendor, int product);
void listenerLoopExecuteMethod(void);
void listenerLoopServer(void);

#pragma mark -

typedef PA_long32 process_number_t;
typedef PA_long32 process_stack_size_t;
typedef PA_long32 method_id_t;
typedef PA_Unichar* process_name_t;

typedef enum
{
    USB_ENDPOINT_UNKNOWN = 0,
    USB_ENDPOINT_OUT = 1,
    USB_ENDPOINT_IN = 2
}usb_enpoint_t;

typedef std::vector<int> usb_device_interfaces;

typedef struct {
    libusb_device *device;
    libusb_device_handle *deviceHandle;
    usb_device_interfaces claimedInterfaces;
    bool isOpen;
} LIBUSB_DEVICE_HANDLE;

typedef struct {
    libusb_device *device;
    uint16_t vid;
    uint16_t pid;
    uint32_t deviceRef;
} LIBUSB_DEVICE;

typedef struct {
    C_BLOB *data;
    int status;
}user_data_t;

#pragma mark -

void close_all_device_handles();
libusb_device *get_device(C_LONGINT deviceRef);
libusb_device *get_device(C_LONGINT &param, C_LONGINT &error);
libusb_device_handle *get_device_handle(C_LONGINT &param, C_LONGINT &error);
void set_alt_setting(C_LONGINT &param_1, C_LONGINT &param_2, C_LONGINT &param_3, C_LONGINT &error);
void claim_interface(C_LONGINT &param_1, C_LONGINT &param_2, C_LONGINT &error);
void release_interface(C_LONGINT &param_1, C_LONGINT &param_2, C_LONGINT &error);
uint32_t open_device(C_LONGINT &param, C_LONGINT &error);
uint32_t open_device_with_vid_pid(C_LONGINT &vid, C_LONGINT &pid, C_LONGINT &error);
void close_device_handle(C_LONGINT &param);
void close_all_device_handles();
uint32_t get_device_list(C_LONGINT &error);

#pragma mark -

void jsonAddIntProperty(CUTF8String &property, const char* name, int value);
void jsonAddComma(CUTF8String &property);

#pragma mark -

usb_enpoint_t get_endpoint_type(int endpoint);
int usb_transfer(int timeout);
void libusb_transfer_cb(libusb_transfer *transfer);
